package prisoners;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import repast.simphony.context.Context;
import repast.simphony.engine.schedule.ScheduledMethod;
import repast.simphony.query.space.grid.GridCell;
import repast.simphony.query.space.grid.GridCellNgh;
import repast.simphony.random.RandomHelper;
import repast.simphony.space.SpatialMath;
import repast.simphony.space.continuous.ContinuousSpace;
import repast.simphony.space.continuous.NdPoint;
import repast.simphony.space.continuous.BouncyBorders;
import repast.simphony.space.graph.Network;
import repast.simphony.space.grid.Grid;
import repast.simphony.space.grid.GridPoint;
import repast.simphony.space.grid.GridDimensions;
import repast.simphony.util.ContextUtils;
import repast.simphony.util.SimUtilities;

public class Prisoner {
	private ContinuousSpace<Object> space;
	private Grid<Object> grid;
	private boolean moved;
	private ArrayList<GridPoint> destinations;
	private int currDestIdx;
	
	public Prisoner(ContinuousSpace<Object> space, Grid<Object> grid) {
		this.space = space;
		this.grid = grid;
		this.destinations = new ArrayList<>(Arrays.asList(
				new GridPoint(5, 5), new GridPoint(45, 5), new GridPoint(45, 45), new GridPoint(5, 45)
		));
		this.currDestIdx = 0;
	}
	
	
	@ScheduledMethod(start = 1, interval = 1)
	public void step() {
		GridPoint pt = grid.getLocation(this);
		GridPoint destination = getDestination(pt);
		moveTowards(destination);
	}
	
	private GridPoint getDestination(GridPoint currentPosition) {
		return this.destinations.get(this.currDestIdx);
	}
	
	private boolean isClose(GridPoint pt) {
		GridPoint mypt = myLocation();
		System.out.println(Math.abs(pt.getX()-mypt.getX()) + Math.abs(pt.getY()-mypt.getY()));
		return Math.abs(pt.getX()-mypt.getX()) < 2 && Math.abs(pt.getY()-mypt.getY()) < 2; 
	}
	
	public void moveTowards(GridPoint pt) {
		if(!isClose(pt)) {
			NdPoint myPoint  = space.getLocation(this);
			NdPoint otherPoint = new NdPoint(pt.getX(), pt.getY());
			double angle = SpatialMath.calcAngleFor2DMovement(space, myPoint, otherPoint);
			space.moveByVector(this, 0.5, angle, 0);
			myPoint = space.getLocation(this);
			grid.moveTo(this, (int)myPoint.getX(), (int)myPoint.getY());
			moved = true;
		} else {
			this.currDestIdx = (this.currDestIdx + 1) % this.destinations.size();
			System.out.println(this.currDestIdx);
		}
		try {
            Thread.sleep(33);
        } catch (InterruptedException e) {
        	
        }
	}
	
	
	private GridPoint myLocation() {
		return grid.getLocation(this);
	}
	
	private GridPoint pointWithMostHumans(List<GridCell<Prisoner>> gridCells) {
		return null;
	}

}
